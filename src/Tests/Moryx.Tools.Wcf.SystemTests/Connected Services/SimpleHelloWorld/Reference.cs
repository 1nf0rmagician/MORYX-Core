//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moryx.Tools.Wcf.SystemTests.SimpleHelloWorld
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Moryx.Tools.Wcf.SystemTests.SimpleHelloWorld.ISimpleHelloWorldWcfService")]
    public interface ISimpleHelloWorldWcfService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleHelloWorldWcfService/Hello", ReplyAction="http://tempuri.org/ISimpleHelloWorldWcfService/HelloResponse")]
        string Hello(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleHelloWorldWcfService/Hello", ReplyAction="http://tempuri.org/ISimpleHelloWorldWcfService/HelloResponse")]
        System.Threading.Tasks.Task<string> HelloAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleHelloWorldWcfService/Throw", ReplyAction="http://tempuri.org/ISimpleHelloWorldWcfService/ThrowResponse")]
        string Throw(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleHelloWorldWcfService/Throw", ReplyAction="http://tempuri.org/ISimpleHelloWorldWcfService/ThrowResponse")]
        System.Threading.Tasks.Task<string> ThrowAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ISimpleHelloWorldWcfServiceChannel : Moryx.Tools.Wcf.SystemTests.SimpleHelloWorld.ISimpleHelloWorldWcfService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class SimpleHelloWorldWcfServiceClient : System.ServiceModel.ClientBase<Moryx.Tools.Wcf.SystemTests.SimpleHelloWorld.ISimpleHelloWorldWcfService>, Moryx.Tools.Wcf.SystemTests.SimpleHelloWorld.ISimpleHelloWorldWcfService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SimpleHelloWorldWcfServiceClient() : 
                base(SimpleHelloWorldWcfServiceClient.GetDefaultBinding(), SimpleHelloWorldWcfServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ISimpleHelloWorldWcfService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SimpleHelloWorldWcfServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(SimpleHelloWorldWcfServiceClient.GetBindingForEndpoint(endpointConfiguration), SimpleHelloWorldWcfServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SimpleHelloWorldWcfServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SimpleHelloWorldWcfServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SimpleHelloWorldWcfServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SimpleHelloWorldWcfServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SimpleHelloWorldWcfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string Hello(string name)
        {
            return base.Channel.Hello(name);
        }
        
        public System.Threading.Tasks.Task<string> HelloAsync(string name)
        {
            return base.Channel.HelloAsync(name);
        }
        
        public string Throw(string name)
        {
            return base.Channel.Throw(name);
        }
        
        public System.Threading.Tasks.Task<string> ThrowAsync(string name)
        {
            return base.Channel.ThrowAsync(name);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISimpleHelloWorldWcfService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISimpleHelloWorldWcfService))
            {
                return new System.ServiceModel.EndpointAddress("http://pxc-n2488/SimpleHelloWorldWcfService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return SimpleHelloWorldWcfServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ISimpleHelloWorldWcfService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return SimpleHelloWorldWcfServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ISimpleHelloWorldWcfService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ISimpleHelloWorldWcfService,
        }
    }
}
